Index: KothPlugin/ModNetworkAPI/Network.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Windows.Interop;\r\nusing NLog.Fluent;\r\nusing Sandbox.Game;\r\nusing Sandbox.ModAPI;\r\nusing VRage.Utils;\r\nusing NLog;\r\nusing Torch.API.Managers;\r\nusing Torch.Managers;\r\n\r\nnamespace KothPlugin.ModNetworkAPI\r\n{\r\n   public enum NetworkTypes { Dedicated, Server, Client }\r\n   \r\n\r\n    public abstract class Network\r\n    {\r\n        public static Network Instance = null;\r\n        public static bool IsInitialized = Instance != null;\r\n        public static readonly Logger Log = LogManager.GetCurrentClassLogger();\r\n\r\n        /// <summary>\r\n        /// Event triggers apon reciveing data over the network\r\n        /// steamId, command, data\r\n        /// </summary>\r\n        public event Action<ulong, string, byte[]> OnCommandRecived;\r\n\r\n        /// <summary>\r\n        /// Event triggers apon client chat input starting with this mods Keyword\r\n        /// </summary>\r\n        [Obsolete(\"Use NetworkAPI.RegisterCommand to handle input\")]\r\n        public event Action<string> OnTerminalInput;\r\n\r\n        /// <summary>\r\n        /// returns the type of network user this is: dedicated, server, client\r\n        /// </summary>\r\n        public NetworkTypes NetworkType => GetNetworkType();\r\n\r\n        public static ushort ComId = 42511;\r\n        public readonly string Keyword = \"/koth\";\r\n        public readonly string ModName = \"KotH\";\r\n\r\n        internal bool UsingTextCommands => Keyword != null;\r\n        \r\n\r\n        internal Dictionary<string, Action<ulong, string, byte[]>> NetworkCommands = new Dictionary<string, Action<ulong, string, byte[]>>();\r\n        internal Dictionary<string, Action<string>> ChatCommands = new Dictionary<string, Action<string>>();\r\n\r\n        /// <summary>\r\n        /// Event driven client, server syncing API. \r\n        /// </summary>\r\n        /// <param name=\"comId\">The communication channel this mod will listen on</param>\r\n        /// <param name=\"modName\">The title use for displaying chat messages</param>\r\n        /// <param name=\"keyword\">The string identifying a chat command</param>\r\n        /// <param name=\"steamId\">fuck you bitch whore cunt</param>\r\n        /// \r\n        protected Network(ushort comId, string modName, string keyword = null)\r\n        {\r\n            ComId = comId;\r\n            ModName = modName ?? string.Empty;\r\n            Keyword = keyword?.ToLower();\r\n\r\n            if (UsingTextCommands)\r\n            {\r\n                //MyAPIGateway.Utilities.MessageEntered += HandleChatInput;\r\n            }\r\n            RegisterNetworkHandler(comId);\r\n           \r\n            \r\n\r\n            Log.Info($\"[NetworkAPI] Initialized. ComId: {ComId} Name: {ModName} Keyword: {Keyword}\");\r\n        }\r\n\r\n\r\n        /// <summary>\r\n        /// Unpacks commands and handles arguments\r\n        /// </summary>\r\n        /// <param name=\"comId\">The communication channel this mod will listen on</param>\r\n        /// <param name=\"msg\">Data chunck recived from the network</param>\r\n        /// <param name=\"steamId\">A players steam id</param>\r\n        /// <param name=\"isReliable\">true</param>\r\n        private void RegisterNetworkHandler(ushort comId, byte[] msg, ulong steamId = ulong.MinValue, bool isReliable = true)\r\n        {\r\n            HandleIncomingPacket(comId, msg, steamId, isReliable);\r\n        }\r\n\r\n        /*public enum MessageType : byte\r\n        {\r\n            DeleteD = 0,\r\n            RunF = 1,\r\n            Message = 2\r\n        }\r\n        \r\n        public void RegisterHandlers()\r\n        {\r\n            MyAPIGateway.Multiplayer.RegisterMessageHandler(Core.ComId, MessageHandler);\r\n        }\r\n\r\n        public static void UnregisterHandlers()\r\n        {\r\n            MyAPIGateway.Multiplayer.UnregisterMessageHandler(Core.ComId, MessageHandler);\r\n        }\r\n\r\n        private static void MessageHandler(byte[] bytes)\r\n        {\r\n            try\r\n            {\r\n                var type = (MessageType)bytes[1];\r\n\r\n\r\n                var data = new byte[bytes.Length - 1];\r\n                Array.Copy(bytes, 1, data, 0, data.Length);\r\n\r\n                switch (type)\r\n                {\r\n                    case MessageType.DeleteD:\r\n                        DeleteD();\r\n                        break;\r\n                    case MessageType.Message:\r\n                        Message(data);\r\n                        break;\r\n                    default:\r\n                        return;\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                \r\n            }\r\n        }\r\n        \r\n        [Serializable]\r\n        public struct Package\r\n        {\r\n            public string Message;\r\n        }\r\n        \r\n        public static void Message(byte[] data)\r\n        {\r\n            var package = MyAPIGateway.Utilities.SerializeFromXML<Package>(Encoding.UTF8.GetString(data));\r\n            \r\n        }\r\n\r\n        public static void DeleteD()\r\n        {\r\n            Core.Clearscore();\r\n            string message = \"fuck you reload\";\r\n            var package = new Package\r\n            {\r\n                Message = message,\r\n            };\r\n            byte[] data = Encoding.UTF8.GetBytes(MyAPIGateway.Utilities.SerializeToXML(package));\r\n            SendToServer(MessageType.RunF, data, ComId);\r\n            \r\n        }\r\n\r\n        \r\n\r\n        public void MessageToServer()\r\n        {\r\n            MyVisualScriptLogicProvider.SendChatMessage(\"function fired\");\r\n            string message = \"fuck you reload\";\r\n            var package = new Package\r\n            {\r\n                Message = message,\r\n            };\r\n            byte[] data = Encoding.UTF8.GetBytes(MyAPIGateway.Utilities.SerializeToXML(package));\r\n            SendToServer(MessageType.RunF, data, ComId);\r\n            MyVisualScriptLogicProvider.SendChatMessage(\"before send to server\");\r\n        }\r\n\r\n        public static void SendToServer(MessageType type, byte[] data, ushort comId)\r\n        {\r\n            MyVisualScriptLogicProvider.SendChatMessage(\"sending to server\");\r\n            ComId = comId;\r\n            var newData = new byte[data.Length + 1];\r\n            newData[1] = (byte)type;\r\n            data.CopyTo(newData, 1);\r\n            MyAPIGateway.Utilities.InvokeOnGameThread(() => { MyAPIGateway.Multiplayer.SendMessageToServer(ComId, newData); });\r\n        }*/\r\n\r\n        /*/// <summary>\r\n        /// Invokes chat command events\r\n        /// </summary>\r\n        /// <param name=\"messageText\">Chat message string</param>\r\n        /// <param name=\"sendToOthers\">should be shown normally in global chat</param>\r\n        private void HandleChatInput(string messageText, ref bool sendToOthers)\r\n        {\r\n            string[] args = messageText.ToLower().Split(' ');\r\n            if (args[0] != Keyword) return;\r\n            sendToOthers = false;\r\n\r\n            string arguments = messageText.Substring(Keyword.Length).Trim(' ');\r\n            OnTerminalInput?.Invoke(arguments);\r\n\r\n            // Meh... this is kinda yucky\r\n            if (args.Length == 1 && ChatCommands.ContainsKey(string.Empty))\r\n            {\r\n                ChatCommands[string.Empty]?.Invoke(string.Empty);\r\n            }\r\n            else if (args.Length > 1 && ChatCommands.ContainsKey(args[1]))\r\n            {\r\n                ChatCommands[args[1]]?.Invoke(arguments.Substring(args[1].Length).Trim(' '));\r\n            }\r\n            else\r\n            {\r\n                if (NetworkType != NetworkTypes.Dedicated)\r\n                {\r\n                    MyAPIGateway.Utilities.ShowMessage(ModName, \"Command not recognized.\");\r\n                }\r\n            }\r\n        }*/\r\n\r\n        /// <summary>\r\n        /// Unpacks commands and handles arguments\r\n        /// </summary>\r\n        /// <param name=\"comId\">The communication channel this mod will listen on</param>\r\n        /// <param name=\"msg\">Data chunck recived from the network</param>\r\n        /// <param name=\"steamId\">A players steam id</param>\r\n        /// <param name=\"isReliable\">true</param>\r\n        private void HandleIncomingPacket(ushort comId, byte[] msg, ulong steamId = ulong.MinValue, bool isReliable = true)\r\n        {\r\n            try\r\n            {\r\n                Command cmd = MyAPIGateway.Utilities.SerializeFromBinary<Command>(msg);\r\n\r\n                if (!string.IsNullOrWhiteSpace(cmd.Message) && NetworkType == NetworkTypes.Client && MyAPIGateway.Session != null)\r\n                {\r\n                    MyAPIGateway.Utilities.ShowMessage(ModName, cmd.Message);\r\n                }\r\n\r\n                if (cmd != null)\r\n                {\r\n                    OnCommandRecived?.Invoke(cmd.SteamId, cmd.CommandString, cmd.Data);\r\n                }\r\n\r\n                if (cmd.CommandString == null)\r\n                {\r\n                    cmd.CommandString = string.Empty;\r\n                }\r\n\r\n                string command = cmd.CommandString.Split(' ')[0];\r\n\r\n                if (NetworkCommands.ContainsKey(command))\r\n                {\r\n                    NetworkCommands[command]?.Invoke(cmd.SteamId, cmd.CommandString, cmd.Data);\r\n                }\r\n\r\n            }\r\n            catch (Exception error)\r\n            {\r\n                Log.Error(error, \"server error\");\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Registers a callback that will fire when the command string is sent\r\n        /// </summary>\r\n        /// <param name=\"command\">The command that triggers the callback</param>\r\n        /// <param name=\"callback\">The function that runs when a command is recived</param>\r\n        public void RegisterNetworkCommand(string command, Action<ulong, string, byte[]> callback)\r\n        {\r\n            if (command == null)\r\n            {\r\n                command = string.Empty;\r\n            }\r\n\r\n            command = command.ToLower();\r\n\r\n            if (NetworkCommands.ContainsKey(command))\r\n            {\r\n                throw new Exception($\"[NetworkAPI] Failed to add the network command callback '{command}'. A command with the same name was already added.\");\r\n            }\r\n\r\n            NetworkCommands.Add(command, callback);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Unregisters a command\r\n        /// </summary>\r\n        /// <param name=\"command\"></param>\r\n        public void UnregisterNetworkCommand(string command)\r\n        {\r\n            if (NetworkCommands.ContainsKey(command))\r\n            {\r\n                NetworkCommands.Remove(command);\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// \r\n        /// </summary>\r\n        /// <param name=\"command\"></param>\r\n        /// <param name=\"callback\"></param>\r\n        public void RegisterChatCommand(string command, Action<string> callback)\r\n        {\r\n            if (command == null)\r\n            {\r\n                command = string.Empty;\r\n            }\r\n\r\n            command = command.ToLower();\r\n\r\n            if (ChatCommands.ContainsKey(command))\r\n            {\r\n                throw new Exception($\"[NetworkAPI] Failed to add the network command callback '{command}'. A command with the same name was already added.\");\r\n            }\r\n\r\n            ChatCommands.Add(command, callback);\r\n        }\r\n\r\n        /// <summary>\r\n        /// \r\n        /// </summary>\r\n        /// <param name=\"command\"></param>\r\n        /// <param name=\"callback\"></param>\r\n        public void UnregisterChatCommand(string command, Action<string> callback)\r\n        {\r\n            if (ChatCommands.ContainsKey(command))\r\n            {\r\n                ChatCommands.Remove(command);\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Sends a command packet across the network\r\n        /// </summary>\r\n        /// <param name=\"commandString\">The command word and any arguments delimidated with spaces</param>\r\n        /// <param name=\"message\">Text to be writen in chat</param>\r\n        /// <param name=\"data\">A serialized object used to send game information</param>\r\n        /// <param name=\"steamId\">A players steam id</param>\r\n        public abstract void SendCommand(string commandString, string message = null, byte[] data = null, ulong steamId = ulong.MinValue, bool isReliable = true);\r\n\r\n        /// <summary>\r\n        /// Unregisters listeners\r\n        /// </summary>\r\n        public void Close()\r\n        {\r\n            MyLog.Default.Info($\"[NetworkAPI] Unregistering communication stream: {ComId}\");\r\n            if (UsingTextCommands)\r\n            {\r\n                //MyAPIGateway.Utilities.MessageEntered -= HandleChatInput;\r\n            }\r\n            \r\n            bool UnregisterNetworkHandler(INetworkHandler HandleIncomingPacket);\r\n\r\n            MyAPIGateway.Multiplayer.UnregisterSecureMessageHandler(ComId, HandleIncomingPacket);\r\n\r\n        }\r\n\r\n        /// <summary>\r\n        /// Calls Instance.Close()\r\n        /// </summary>\r\n        public static void Dispose()\r\n        {\r\n            if (IsInitialized)\r\n            {\r\n                Instance.Close();\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Initializes the default instance of the NetworkAPI\r\n        /// </summary>\r\n        public static void Init(ushort comId, string modName, string keyword = null)\r\n        {\r\n            if (IsInitialized) return;\r\n\r\n            if (GetNetworkType() == NetworkTypes.Server)\r\n            {\r\n                Instance = new Server(comId, modName, keyword);\r\n            }\r\n            \r\n        }\r\n\r\n        /// <summary>\r\n        /// Finds the type of network system the current instance is running on\r\n        /// </summary>\r\n        /// <returns>MultiplayerTypes Enum</returns>\r\n        public static NetworkTypes GetNetworkType()\r\n        {\r\n            \r\n            return NetworkTypes.Server;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/KothPlugin/ModNetworkAPI/Network.cs b/KothPlugin/ModNetworkAPI/Network.cs
--- a/KothPlugin/ModNetworkAPI/Network.cs	(revision 84c011fa5c4d5eafd6955a8a7c212969841eb11a)
+++ b/KothPlugin/ModNetworkAPI/Network.cs	(date 1610846810634)
@@ -343,7 +343,7 @@
             {
                 //MyAPIGateway.Utilities.MessageEntered -= HandleChatInput;
             }
-            
+
             bool UnregisterNetworkHandler(INetworkHandler HandleIncomingPacket);
 
             MyAPIGateway.Multiplayer.UnregisterSecureMessageHandler(ComId, HandleIncomingPacket);
