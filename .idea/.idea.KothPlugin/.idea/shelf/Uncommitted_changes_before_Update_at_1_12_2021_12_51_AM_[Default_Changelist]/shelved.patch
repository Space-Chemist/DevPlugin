Index: KothPlugin/WebService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.IO;\r\nusing System.Net;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing Newtonsoft.Json;\r\n\r\nnamespace KothPlugin\r\n{\r\n    internal static class WebService\r\n    {\r\n        /// <summary>\r\n        /// The port the HttpListener should listen on\r\n        /// </summary>\r\n        private const int Port = 8888;\r\n\r\n        /// <summary>\r\n        /// This is the heart of the web server\r\n        /// </summary>\r\n        private static readonly HttpListener Listener = new HttpListener {Prefixes = {$\"http://localhost:{Port}/\"}};\r\n\r\n        /// <summary>\r\n        /// A flag to specify when we need to stop\r\n        /// </summary>\r\n        private static bool _keepGoing = true;\r\n\r\n        /// <summary>\r\n        /// Keep the task in a static variable to keep it alive\r\n        /// </summary>\r\n        private static Task _mainLoop;\r\n\r\n        /// <summary>\r\n        /// Call this to start the web server\r\n        /// </summary>\r\n        public static void StartWebServer()\r\n        {\r\n            if (_mainLoop != null && !_mainLoop.IsCompleted) return; //Already started\r\n            _mainLoop = MainLoop();\r\n        }\r\n\r\n        /// <summary>\r\n        /// Call this to stop the web server. It will not kill any requests currently being processed.\r\n        /// </summary>\r\n        public static void StopWebServer()\r\n        {\r\n            _keepGoing = false;\r\n            lock (Listener)\r\n            {\r\n                //Use a lock so we don't kill a request that's currently being processed\r\n                Listener.Stop();\r\n            }\r\n\r\n            try\r\n            {\r\n                _mainLoop.Wait();\r\n            }\r\n            catch\r\n            {\r\n                /* je ne care pas */\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// The main loop to handle requests into the HttpListener\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        private static async Task MainLoop()\r\n        {\r\n            Listener.Start();\r\n            while (_keepGoing)\r\n            {\r\n                try\r\n                {\r\n                    //GetContextAsync() returns when a new request come in\r\n                    var context = await Listener.GetContextAsync();\r\n                    lock (Listener)\r\n                    {\r\n                        if (_keepGoing) ProcessRequest(context);\r\n                    }\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    if (e is HttpListenerException) return; //this gets thrown when the listener is stopped\r\n                    //TODO: Log the vvexception\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        private static void ProcessRequest(HttpListenerContext context)\r\n        {\r\n            using (var response = context.Response)\r\n            {\r\n                try\r\n                {\r\n                    var handled = false;\r\n                    switch (context.Request.Url.AbsolutePath)\r\n                    {\r\n                        //This is where we do different things depending on the URL\r\n                        //TODO: Add cases for each URL we want to respond to\r\n                        case \"/json\":\r\n                            switch (context.Request.HttpMethod)\r\n                            {\r\n                                case \"GET\":\r\n                                    //Get the current settings\r\n                                    response.ContentType = \"application/json\";\r\n\r\n                                    //This is what we want to send back\r\n                                    var data = Koth.ScoresFromStorage(); //Koth.ScoresFromStorage();\r\n                                    var responseBody = JsonConvert.SerializeObject(data);\r\n\r\n                                    //Write it to the response stream\r\n                                    var buffer = Encoding.UTF8.GetBytes(responseBody);\r\n                                    response.ContentLength64 = buffer.Length;\r\n                                    response.OutputStream.Write(buffer, 0, buffer.Length);\r\n                                    handled = true;\r\n                                    break;\r\n                            }\r\n\r\n                            break;\r\n\r\n\r\n                        case \"/koth\":\r\n                            switch (context.Request.HttpMethod)\r\n                            {\r\n                                case \"GET\":\r\n\r\n                                    var Kothdata = Koth.ScoresFromStorage(); //Koth.ScoresFromStorage();\r\n                                    \r\n                                    \r\n                                    \r\n                                    var pageData = \"\"; //NEEDS to be koth.html\r\n\r\n                                    var data = Encoding.UTF8.GetBytes(pageData.Replace(\"REPLACEMEYES\",\r\n                                        JsonConvert.SerializeObject(Kothdata)));\r\n                                    response.ContentType = \"text/html\";\r\n                                    response.ContentEncoding = Encoding.UTF8;\r\n                                    response.ContentLength64 = data.LongLength;\r\n                                    response.OutputStream.Write(data, 0, data.Length);\r\n                                    handled = true;\r\n                                    break;\r\n                            }\r\n\r\n                            break;\r\n                    }\r\n\r\n                    if (!handled)\r\n                    {\r\n                        response.StatusCode = 404;\r\n                    }\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    //Return the exception details the client - you may or may not want to do this\r\n                    response.StatusCode = 500;\r\n                    response.ContentType = \"application/json\";\r\n                    var buffer = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(e));\r\n                    response.ContentLength64 = buffer.Length;\r\n                    response.OutputStream.Write(buffer, 0, buffer.Length);\r\n\r\n                    //TODO: Log the exception\r\n                }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/KothPlugin/WebService.cs b/KothPlugin/WebService.cs
--- a/KothPlugin/WebService.cs	
+++ b/KothPlugin/WebService.cs	
@@ -129,7 +129,7 @@
                                     
                                     
                                     
-                                    var pageData = ""; //NEEDS to be koth.html
+                                    var pageData = "hi"; //NEEDS to be koth.html
 
                                     var data = Encoding.UTF8.GetBytes(pageData.Replace("REPLACEMEYES",
                                         JsonConvert.SerializeObject(Kothdata)));
